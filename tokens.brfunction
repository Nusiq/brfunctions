`/s[A]`, `/state[A]` - state with name "A"
`/s[A](123 123 123)`, `/state[A](123 123 123)` - defined coordinates "123 123 123" state with name "A"
`/p[A](123 123 123)`, `/position[A](123 123 123)` - position "123 123 123" with name "A"
`/p[A](123 123 123 456 456 456)`, `/position[A](123 123 123 456 456 456)` - area between "123 123 123" and "456 456 456" with name "A"
`/c[A](asdf)`, `/custom[A](asdf)` - custom value "asdf" with name "A"

`s[A](1)`, `state[A](1)` - insert representation of value 1 in state "A"
`p[A]@`, `position[A]@` - insert position "A" using selector style "x=123,y=123,z=123" or if its dimension "x=123,y=123,z=123,dx=100,dy=100,dz=100"
`p[A]`, `position[A]` - insert position "A" in default style
`c[A]`, `custom[A]` - insert value of custom value "A"

`/i[A]`, `/impulse[A]` - new impulse group of commandblocks with name "A"
#`/i`, `/impulse` - new unnamed impulse group of commandblocks

`/r[A]`, `/repeat[A]` - new repeating group of commandblocks with name "A"
#`/r`, `/repeat` - new unnamed repeating group of commandblocks

`/d[A]`, `/dialog[A]` - new dialog group of commandblocks with name "A"
#`/d`, `dialog` - new unnamed dialog group of commandblocks


`i[A]`, `impulse[A]`, `i[A](1)`, `impulse[A](1)` - activates impulse group of commandblocks with name "A"
`i[A](0)`, `impulse[A](0)` - stops impulse group of commandblocks with name "A"

`r[A]`, `repeat[A]`, `r[A](1)`, `repeat[A](1)` - activates repeating group of commandblocks with name "A"
`r[A](0)`, `repeat[A](0)` - stops repeating group of commandblocks with name "A"

`d[A]`, `dialog[A]`, `d[A](1)`, `dialog[A](1)` - activates repeating group of commandblocks with name "A"
`d[A](0)`, `dialog[A](0)` - stops repeating group of commandblocks with name "A"

#Comment - a comment
say hi - a command
> say hi - conditional command


`d[A]` - starting new command chains in dialog
+ say this
> say is
> say one
> say chain
+ say this
> say is
 say new
 say chain
 

###########################PROJECT FILE######################
Project file should be .json file with list of strings inside it. These strings are paths to a .brfunction file. Path to project file is a home path. Example:
["file.brfinction","file1.brfunction"]
 
 
 
###################################################################################################
###################################################################################################
###################################################################################################
###################################################################################################
##############################Planned features.####################################################
`time_sequence_start(SELECTOR SCOREBOARD 1)` and `time_sequence_end` - starts and ends time sequence using selector SELECTOR scoreboard SCOREBOARD and starting at value 1. Example:
	`time_sequence_start(SELECTOR SCOREBOARD 1)`
	say ABC
	> say DEF
	+10 say XYZ
	say ZYX
	`time_sequence_end`
	Code above will create sequence triggered by setting SELECTOR SCOREBOARD to 1. Command "say ABC" will be executed instantly with conditional command "say DEF". Commands say XYZ and ZYX will be executed 10 activations of commandblocks chain later.
-Add option to define name of commandblock - squere brackets before the command
-`id[A]` - generates numerical ID for name A. Using the same key inside squere brackets will always return the same number.
-Separate 3-coordinates positions from 6-coordinates position and rename it to position and area.
-`seq(say X Y Z;X=0.3 0.7 0.1;Y=1 5;Z=0 100 25)` - generates sequence of lines (commands and tokens) before processing the whole file. It accepts any number of named arguments that are representing range of numbers to iterate through. The first argument is a string which substrings matching the names of further arguments will be replaced with numbers.
-Mark dialog as deprecated.
-Mark state as deprecated.
